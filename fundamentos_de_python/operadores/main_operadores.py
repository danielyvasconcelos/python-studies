# OPERADORES EM PYTHON - GUIA COMPLETO MODULARIZADO

"""
OPERADORES EM PYTHON:
S√£o s√≠mbolos especiais que realizam opera√ß√µes em operandos (valores/vari√°veis).
Python possui diversos tipos de operadores para diferentes finalidades.

Este arquivo lista todos os m√≥dulos de estudo sobre operadores.
"""

print("=" * 60)
print("OPERADORES EM PYTHON - GUIA COMPLETO PARA ESTUDOS")
print("=" * 60)

# Lista dos arquivos para executar
arquivos_estudo = [
    "operadores_aritmeticos.py",
    "operadores_de_comparacao.py", 
    "operador_logico_AND.py",
    "operador_logico_OR.py",
    "operador_logico_NOT.py",
    "operadores_de_atribuicao.py",
    "operadores_de_identidade.py",
    "operadores_de_pertencimento.py"
]

print("\nüìã ARQUIVOS DISPON√çVEIS PARA ESTUDO:")
for i, arquivo in enumerate(arquivos_estudo, 1):
    nome_limpo = arquivo.replace('.py', '').replace('_', ' ').title()
    print(f"{i:2d}. {arquivo:<35} - {nome_limpo}")

print("\n" + "=" * 60)
print("üìö TIPOS DE OPERADORES ABORDADOS:")
print("=" * 60)

tipos_operadores = [
    ("üî¢ Aritm√©ticos", "Opera√ß√µes matem√°ticas (+, -, *, /, //, %, **)"),
    ("‚öñÔ∏è  Compara√ß√£o", "Comparar valores (==, !=, <, >, <=, >=)"),
    ("üîó L√≥gicos", "Opera√ß√µes l√≥gicas (and, or, not)"),
    ("üìù Atribui√ß√£o", "Atribuir valores (=, +=, -=, *=, /=, etc.)"),
    ("üÜî Identidade", "Comparar objetos (is, is not)"),
    ("üì¶ Pertencimento", "Verificar presen√ßa (in, not in)")
]

for tipo, descricao in tipos_operadores:
    print(f"{tipo:<15} - {descricao}")

print("\n" + "=" * 60)
print("üéØ PRECED√äNCIA DOS OPERADORES (maior para menor):")
print("=" * 60)

precedencia = [
    "1. ** (potencia√ß√£o)",
    "2. +x, -x, ~x (un√°rios: positivo, negativo, NOT bit a bit)",
    "3. *, /, //, % (multiplica√ß√£o, divis√µes, m√≥dulo)",
    "4. +, - (adi√ß√£o, subtra√ß√£o)",
    "5. <<, >> (shifts bit a bit)",
    "6. & (AND bit a bit)",
    "7. ^ (XOR bit a bit)",
    "8. | (OR bit a bit)",
    "9. ==, !=, <, >, <=, >=, is, is not, in, not in (compara√ß√µes)",
    "10. not (NOT l√≥gico)",
    "11. and (AND l√≥gico)",
    "12. or (OR l√≥gico)",
    "13. = (atribui√ß√£o)"
]

for item in precedencia:
    print(f"   {item}")

print("\n" + "=" * 60)
print("üí° COMO USAR ESTE MATERIAL:")
print("=" * 60)

instrucoes = [
    "1. Execute cada arquivo individualmente para estudar t√≥picos espec√≠ficos",
    "2. Comece pelos operadores b√°sicos (aritm√©ticos e compara√ß√£o)",
    "3. Pratique modificando os valores nos exemplos",
    "4. Leia os coment√°rios para entender conceitos importantes",
    "5. Use como refer√™ncia durante desenvolvimento"
]

for instrucao in instrucoes:
    print(f"   {instrucao}")

print("\n" + "=" * 60)
print("üöÄ EXEMPLOS R√ÅPIDOS:")
print("=" * 60)

print("# Aritm√©ticos")
print("10 + 5 = 15")
print("10 ** 2 = 100")

print("\n# Compara√ß√£o")
print("10 > 5 = True")
print("'Python' == 'Python' = True")

print("\n# L√≥gicos")
print("True and False = False")
print("True or False = True")
print("not True = False")

print("\n# Atribui√ß√£o")
print("x = 10")
print("x += 5  # x = 15")

print("\n# Identidade")
print("a = [1, 2]; b = [1, 2]")
print("a == b = True (mesmo conte√∫do)")
print("a is b = False (objetos diferentes)")

print("\n# Pertencimento")
print("'Python' in 'Python √© √≥timo' = True")
print("5 in [1, 2, 3, 4, 5] = True")

print("\n" + "=" * 60)
print("üìñ PARA EXECUTAR:")
print("=" * 60)
print("python operadores_aritmeticos.py")
print("python operadores_de_comparacao.py")
print("python operador_logico_AND.py")
print("# ... e assim por diante")

print("\n" + "=" * 60)
print("üéâ BOM ESTUDO!")
print("=" * 60)