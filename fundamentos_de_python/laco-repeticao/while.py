# LA√áO DE REPETI√á√ÉO WHILE EM PYTHON

"""
LA√áO WHILE:
O while √© uma estrutura de repeti√ß√£o que executa um bloco de c√≥digo
ENQUANTO uma condi√ß√£o for verdadeira.

SINTAXE:
while condi√ß√£o:
    # c√≥digo a ser repetido

CARACTER√çSTICAS:
- Testa a condi√ß√£o ANTES de executar o bloco
- Se a condi√ß√£o for False desde o in√≠cio, o bloco nunca executa
- Pode criar loops infinitos se a condi√ß√£o nunca se tornar False
- Muito usado quando n√£o sabemos quantas vezes o loop vai executar
"""

print("=== LA√áO DE REPETI√á√ÉO WHILE ===")

# 1. ESTRUTURA B√ÅSICA DO WHILE

print("\n=== ESTRUTURA B√ÅSICA ===")

# Exemplo simples: contar de 1 a 5
contador = 1
print("Contando de 1 a 5:")
while contador <= 5:
    print(f"N√∫mero: {contador}")
    contador += 1  # INCREMENTO: adiciona 1 ao contador

print("Loop finalizado!")

# 2. L√ìGICA DE INCREMENTO E DECREMENTO

print("\n=== INCREMENTO E DECREMENTO ===")

print("INCREMENTO (+1):")
# Incremento: aumentar o valor da vari√°vel
i = 0
while i < 3:
    print(f"i = {i}")
    i += 1  # Equivale a: i = i + 1

print("\nDECREMENTO (-1):")
# Decremento: diminuir o valor da vari√°vel
j = 5
while j > 0:
    print(f"j = {j}")
    j -= 1  # Equivale a: j = j - 1

print("\nINCREMENTO DE 2 EM 2:")
# Incremento personalizado
k = 0
while k <= 10:
    print(f"k = {k}")
    k += 2  # Incrementa de 2 em 2

print("\nDECREMENTO DE 3 EM 3:")
# Decremento personalizado
m = 15
while m >= 0:
    print(f"m = {m}")
    m -= 3  # Decrementa de 3 em 3

# 3. DIFERENTES FORMAS DE INCREMENTO/DECREMENTO

print("\n=== FORMAS DE INCREMENTO/DECREMENTO ===")

print("Operadores de atribui√ß√£o:")
x = 10
print(f"Valor inicial: x = {x}")

x += 5   # x = x + 5
print(f"x += 5: {x}")

x -= 3   # x = x - 3
print(f"x -= 3: {x}")

x *= 2   # x = x * 2
print(f"x *= 2: {x}")

x //= 4  # x = x // 4 (divis√£o inteira)
print(f"x //= 4: {x}")

# 4. CONDI√á√ïES DE PARADA

print("\n=== CONDI√á√ïES DE PARADA ===")

print("1. Condi√ß√£o num√©rica:")
num = 1
while num <= 3:
    print(f"Execu√ß√£o {num}")
    num += 1

print("\n2. Condi√ß√£o booleana:")
continuar = True
tentativas = 0
while continuar:
    tentativas += 1
    print(f"Tentativa {tentativas}")
    if tentativas >= 3:
        continuar = False  # Muda a condi√ß√£o para parar o loop

print("\n3. Condi√ß√£o com string:")
resposta = "sim"
while resposta == "sim":
    print("Executando...")
    resposta = "n√£o"  # Simula mudan√ßa de resposta

# 5. LOOP INFINITO E BREAK

print("\n=== LOOP INFINITO E BREAK ===")

print("Usando break para sair do loop:")
contador = 0
while True:  # Loop infinito
    contador += 1
    print(f"Itera√ß√£o {contador}")
    
    if contador == 3:
        print("Saindo do loop com break!")
        break  # Sai do loop imediatamente

print("C√≥digo ap√≥s o loop")

# 6. CONTINUE - PULAR ITERA√á√ÉO

print("\n=== CONTINUE - PULAR ITERA√á√ÉO ===")

print("Pulando n√∫meros pares:")
numero = 0
while numero < 10:
    numero += 1
    
    if numero % 2 == 0:  # Se for par
        continue  # Pula para a pr√≥xima itera√ß√£o
    
    print(f"N√∫mero √≠mpar: {numero}")

# 7. WHILE COM ELSE

print("\n=== WHILE COM ELSE ===")

print("O else executa quando o while termina normalmente (sem break):")

# Exemplo 1: Termina normalmente
i = 1
while i <= 3:
    print(f"i = {i}")
    i += 1
else:
    print("Loop terminou normalmente - ELSE executado")

print("\nExemplo com break (else N√ÉO executa):")
j = 1
while j <= 10:
    print(f"j = {j}")
    if j == 2:
        break
    j += 1
else:
    print("Este else N√ÉO ser√° executado")

# 8. VALIDA√á√ÉO DE ENTRADA

print("\n=== VALIDA√á√ÉO DE ENTRADA ===")

print("Simulando valida√ß√£o de entrada:")
# Simula√ß√£o (normalmente usaria input())
tentativas = 0
senha_correta = "123456"
senhas_teste = ["123", "abc", "123456"]  # Simula entradas do usu√°rio

while tentativas < len(senhas_teste):
    senha = senhas_teste[tentativas]
    print(f"Tentativa {tentativas + 1}: Senha digitada = '{senha}'")
    
    if senha == senha_correta:
        print("Senha correta! Acesso liberado.")
        break
    else:
        print("Senha incorreta. Tente novamente.")
    
    tentativas += 1
else:
    print("M√°ximo de tentativas excedido!")

# 9. ACUMULADORES

print("\n=== ACUMULADORES ===")

print("1. Soma de n√∫meros:")
soma = 0
i = 1
while i <= 5:
    soma += i  # Acumula a soma
    print(f"i = {i}, soma acumulada = {soma}")
    i += 1

print(f"Soma final: {soma}")

print("\n2. Produto de n√∫meros:")
produto = 1
j = 1
while j <= 4:
    produto *= j  # Acumula o produto
    print(f"j = {j}, produto acumulado = {produto}")
    j += 1

print(f"Produto final (fatorial de 4): {produto}")

print("\n3. Contador de ocorr√™ncias:")
texto = "python"
letra_busca = "p"
contador_letras = 0
indice = 0

while indice < len(texto):
    if texto[indice] == letra_busca:
        contador_letras += 1
    indice += 1

print(f"A letra '{letra_busca}' aparece {contador_letras} vez(es) em '{texto}'")

# 10. LOOPS ANINHADOS (WHILE DENTRO DE WHILE)

print("\n=== LOOPS ANINHADOS ===")

print("Tabuada do 1 ao 3:")
i = 1
while i <= 3:
    print(f"\nTabuada do {i}:")
    j = 1
    while j <= 5:
        resultado = i * j
        print(f"{i} x {j} = {resultado}")
        j += 1
    i += 1

# 11. EXEMPLOS PR√ÅTICOS

print("\n=== EXEMPLOS PR√ÅTICOS ===")

print("1. Contagem regressiva:")
tempo = 5
while tempo > 0:
    print(f"Tempo restante: {tempo}")
    tempo -= 1
print("Tempo esgotado!")

print("\n2. Encontrar o primeiro m√∫ltiplo:")
numero = 17
multiplo = numero
while multiplo % 10 != 0:  # At√© encontrar m√∫ltiplo de 10
    multiplo += numero

print(f"Primeiro m√∫ltiplo de {numero} que √© m√∫ltiplo de 10: {multiplo}")

print("\n3. Sequ√™ncia de Fibonacci:")
print("Primeiros 8 n√∫meros da sequ√™ncia de Fibonacci:")
a, b = 0, 1
contador = 0
while contador < 8:
    print(a, end=" ")
    a, b = b, a + b  # Troca valores e calcula pr√≥ximo
    contador += 1
print()

print("\n4. Jogo de adivinha√ß√£o (simulado):")
numero_secreto = 7
palpites = [5, 10, 7]  # Simula palpites do usu√°rio
tentativa = 0

while tentativa < len(palpites):
    palpite = palpites[tentativa]
    print(f"Palpite: {palpite}")
    
    if palpite == numero_secreto:
        print("Parab√©ns! Voc√™ acertou!")
        break
    elif palpite < numero_secreto:
        print("Muito baixo!")
    else:
        print("Muito alto!")
    
    tentativa += 1
else:
    print(f"Fim do jogo! O n√∫mero era {numero_secreto}")

# 12. CUIDADOS E BOAS PR√ÅTICAS

print("\n=== CUIDADOS E BOAS PR√ÅTICAS ===")

print("1. SEMPRE garanta que a condi√ß√£o pode se tornar False:")
print("   ‚úÖ Correto: while i < 10: i += 1")
print("   ‚ùå Perigoso: while i < 10: pass  # i nunca muda!")

print("\n2. Inicialize vari√°veis antes do loop:")
print("   ‚úÖ contador = 0")
print("   ‚úÖ while contador < 5:")

print("\n3. Use break para sair de loops infinitos controlados:")
print("   ‚úÖ while True:")
print("       if condicao_saida:")
print("           break")

print("\n4. Cuidado com loops aninhados e break:")
print("   break s√≥ sai do loop mais interno")

# Exemplo de loop infinito controlado
print("\n5. Exemplo de menu com loop infinito:")
opcoes_menu = ["1", "2", "0"]  # Simula escolhas do usu√°rio
indice_opcao = 0

while True:
    print("\n--- MENU ---")
    print("1. Op√ß√£o 1")
    print("2. Op√ß√£o 2") 
    print("0. Sair")
    
    # Simula entrada do usu√°rio
    if indice_opcao < len(opcoes_menu):
        opcao = opcoes_menu[indice_opcao]
        indice_opcao += 1
    else:
        opcao = "0"
    
    print(f"Op√ß√£o escolhida: {opcao}")
    
    if opcao == "1":
        print("Executando op√ß√£o 1...")
    elif opcao == "2":
        print("Executando op√ß√£o 2...")
    elif opcao == "0":
        print("Saindo do programa...")
        break
    else:
        print("Op√ß√£o inv√°lida!")

# 13. COMPARA√á√ÉO: WHILE vs FOR

print("\n=== WHILE vs FOR ===")

print("Use WHILE quando:")
print("- N√£o souber quantas itera√ß√µes ser√£o necess√°rias")
print("- A condi√ß√£o de parada depende de algo al√©m de um contador")
print("- Precisar de controle mais flex√≠vel sobre o loop")

print("\nUse FOR quando:")
print("- Souber o n√∫mero exato de itera√ß√µes")
print("- Iterar sobre uma sequ√™ncia (lista, string, range)")
print("- Quiser c√≥digo mais conciso")

print("\nExemplo - mesmo resultado, m√©todos diferentes:")

print("Com WHILE:")
i = 0
while i < 5:
    print(f"WHILE: {i}")
    i += 1

print("Com FOR:")
for i in range(5):
    print(f"FOR: {i}")

# 14. EXERC√çCIOS PR√ÅTICOS

print("\n=== EXERC√çCIOS RESOLVIDOS ===")

print("1. Somar n√∫meros at√© que a soma seja maior que 50:")
soma = 0
numero = 1
while soma <= 50:
    soma += numero
    numero += 1

print(f"Soma final: {soma}, √∫ltimo n√∫mero adicionado: {numero-1}")

print("\n2. Contar d√≠gitos de um n√∫mero:")
numero = 12345
contador_digitos = 0
temp = numero

while temp > 0:
    temp //= 10  # Remove o √∫ltimo d√≠gito
    contador_digitos += 1

print(f"O n√∫mero {numero} tem {contador_digitos} d√≠gitos")

print("\n3. Inverter um n√∫mero:")
numero = 12345
numero_invertido = 0
temp = numero

while temp > 0:
    digito = temp % 10  # Pega o √∫ltimo d√≠gito
    numero_invertido = numero_invertido * 10 + digito
    temp //= 10  # Remove o √∫ltimo d√≠gito

print(f"N√∫mero original: {numero}")
print(f"N√∫mero invertido: {numero_invertido}")

print("\n4. Encontrar o maior divisor comum (MDC):")
a, b = 48, 18
print(f"Calculando MDC de {a} e {b}:")

while b != 0:
    print(f"a = {a}, b = {b}")
    resto = a % b
    a = b
    b = resto

print(f"MDC = {a}")

print("\n‚úÖ Estudo completo sobre la√ßo WHILE finalizado!")
print("\nüéØ RESUMO DOS CONCEITOS:")
print("- while executa ENQUANTO a condi√ß√£o for True")
print("- Sempre garanta que a condi√ß√£o pode se tornar False")
print("- Use incremento (+=) e decremento (-=) para controlar o loop")
print("- break sai do loop, continue pula para pr√≥xima itera√ß√£o")
print("- else executa quando o loop termina normalmente")
print("- √ötil para valida√ß√µes, menus, e quando n√£o sabemos quantas itera√ß√µes")